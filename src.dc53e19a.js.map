{"version":3,"sources":["BaseBallMgmt.js","index.js"],"names":["BaseBallMgmt","score","correctAnswer","answerList","resultList","prototype","checkOverlapNum","inputValue","checkSet","Set","size","makeRandomNum","overlapNum","randomNum","Math","floor","random","toString","find","num","makeCorrectAnswer","newCorrectAnswer","i","push","console","log","init","inputAnswer","answer","nonCollectCallbackFunc","collectCallbackFunc","failCallbackFunc","checkAnswer","result","getResult","strike","ball","correctAnswerSet","delete","has","clear","search","module","exports","require","gameStartViewElement","document","getElementById","gameStartBtnElement","querySelector","gamePlayViewElement","inputAnswerElement","scoreTextElement","answerListElement","resultListElement","baseBallMgmtInstance","newGame","setValueOnPage","removeAllChild","element","hasChildNodes","removeChild","firstChild","setList","list","length","newLi","createElement","innerHTML","appendChild","gameStart","style","display","setAnswerList","setResultList","parseInt","color","e","keyCode","target","value","inputList","alert","err","addEventListener"],"mappings":"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","file":"src.dc53e19a.js","sourceRoot":"../src","sourcesContent":["function BaseBallMgmt() {\n  this.score = 10;\n  this.correctAnswer = [];\n  this.answerList = [];\n  this.resultList = [];\n}\n\nBaseBallMgmt.prototype.checkOverlapNum = function (inputValue) {\n  const checkSet = new Set(inputValue);\n\n  if (checkSet.size != 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nBaseBallMgmt.prototype.makeRandomNum = function (correctAnswer) {\n  let randomNum;\n  let overlapNum = \"999\";\n\n  while (overlapNum) {\n    randomNum = Math.floor(Math.random() * 9).toString();\n    overlapNum = correctAnswer.find(function (num) {\n      return num === randomNum;\n    });\n  }\n\n  return randomNum;\n};\n\nBaseBallMgmt.prototype.makeCorrectAnswer = function () {\n  const newCorrectAnswer = [];\n  for (let i = 0; i < 3; i++) {\n    newCorrectAnswer.push(this.makeRandomNum(newCorrectAnswer));\n  }\n  console.log(\"make correct answer\", newCorrectAnswer);\n  return newCorrectAnswer;\n};\n\nBaseBallMgmt.prototype.init = function () {\n  console.log(\"claer\", this.score, this.answerList, this.resultList);\n  this.score = 10;\n  this.answerList = [];\n  this.resultList = [];\n  this.correctAnswer = this.makeCorrectAnswer();\n};\n\nBaseBallMgmt.prototype.inputAnswer = function (\n  answer,\n  nonCollectCallbackFunc,\n  collectCallbackFunc,\n  failCallbackFunc\n) {\n  if (this.checkAnswer(answer) === -1) {\n    failCallbackFunc(\"inputErr\");\n    return;\n  }\n\n  if (this.checkOverlapNum(answer)) {\n    failCallbackFunc(\"overlapErr\");\n    return;\n  }\n\n  const result = this.getResult(answer);\n\n  this.score -= 1;\n  this.answerList.push(answer);\n  this.resultList.push(result);\n\n  if (result === \"3S\") collectCallbackFunc(this.score);\n  else nonCollectCallbackFunc(this.score, this.answerList, this.resultList);\n};\n\nBaseBallMgmt.prototype.getResult = function (answer) {\n  let result = \"\";\n  let strike = 0;\n  let ball = 0;\n  correctAnswerSet = new Set(this.correctAnswer);\n\n  // strike check\n  for (let i = 0; i < 3; i++) {\n    if (this.correctAnswer[i] === answer[i]) {\n      strike += 1;\n      correctAnswerSet.delete(answer[i]);\n    }\n  }\n\n  // ball check\n  for (let i = 0; i < 3; i++) {\n    if (correctAnswerSet.has(answer[i])) {\n      ball += 1;\n    }\n  }\n\n  correctAnswerSet.clear();\n\n  if (strike === 0 && ball === 0) {\n    result = \"OUT\";\n  } else {\n    result += strike !== 0 ? `${strike}S` : \"\";\n    result += ball !== 0 ? `${ball}B` : \"\";\n  }\n\n  return result;\n};\n\nBaseBallMgmt.prototype.checkAnswer = function (answer) {\n  return answer.search(/^[0-9]{3}$/);\n};\n\nmodule.exports = BaseBallMgmt;\n","const BaseBallMgmt = require(\"./BaseBallMgmt\");\n\nconst gameStartViewElement = document.getElementById(\"start-page\");\nconst gameStartBtnElement = gameStartViewElement.querySelector(\"h1\");\nconst gamePlayViewElement = document.getElementById(\"play-page\");\nconst inputAnswerElement = document.getElementById(\"play-input\");\nconst scoreTextElement = document.getElementById(\"play-score\");\nconst answerListElement = document.getElementById(\"answer-list\");\nconst resultListElement = document.getElementById(\"result-list\");\n\nconst baseBallMgmtInstance = new BaseBallMgmt();\n\nfunction newGame() {\n  baseBallMgmtInstance.init();\n  setValueOnPage(10, [], []);\n}\n\nfunction removeAllChild(element) {\n  while (element.hasChildNodes()) {\n    element.removeChild(element.firstChild);\n  }\n}\n\nfunction setList(element, list) {\n  removeAllChild(element);\n  for (let i = 0; i < list.length; i++) {\n    const newLi = document.createElement(\"li\");\n    newLi.innerHTML = list[i];\n    element.appendChild(newLi);\n  }\n}\n\nfunction gameStart() {\n  gameStartViewElement.style.display = \"none\";\n  gamePlayViewElement.style.display = \"block\";\n\n  baseBallMgmtInstance.init();\n}\n\nfunction setAnswerList(answerList) {\n  setList(answerListElement, answerList);\n}\n\nfunction setResultList(resultList) {\n  setList(resultListElement, resultList);\n}\n\nfunction setValueOnPage(score, answerList, resultList) {\n  scoreTextElement.innerHTML = score;\n  if (parseInt(score) < 4) {\n    scoreTextElement.style.color = \"red\";\n  } else {\n    scoreTextElement.style.color = \"black\";\n  }\n\n  setAnswerList(answerList);\n  setResultList(resultList);\n}\n\nfunction inputAnswer(e) {\n  if (e.keyCode == 13) {\n    const inputValue = e.target.value;\n    e.target.value = \"\";\n    console.log(\"inputAnswer\", inputValue);\n\n    baseBallMgmtInstance.inputAnswer(\n      inputValue,\n      function (score, inputList, resultList) {\n        if (score == 0) {\n          alert(\"당신은 패배하였습니다.\\n게임을 다시 시작합니다.\");\n          newGame();\n        } else {\n          setValueOnPage(score, inputList, resultList);\n        }\n      },\n      function (score) {\n        alert(\n          `축하합니다. 정답을 맞추셨습니다.\\n당신의 점수는 ${score}점 입니다.\\n게임을 다시 시작합니다.`\n        );\n        newGame();\n      },\n      function (err) {\n        if (err === \"inputErr\")\n          alert(\"입력값이 세자리가 아닙니다. 다시 입력해주세요.\");\n        else if (err === \"overlapErr\") alert(\"중복된 값을 입력하면 안됩니다.\");\n      }\n    );\n  }\n}\n\nfunction init() {\n  gameStartBtnElement.addEventListener(\"click\", gameStart);\n  inputAnswerElement.addEventListener(\"keydown\", inputAnswer);\n}\n\ninit();\n"]}